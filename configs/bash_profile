source $HOME/.profile # source similar files between bash and zsh

# {{{ ALIAS
alias ll="ls -lah"
alias up="cd .."
alias home="cd ~"
alias emptytrash="rm -fr ~/.Trash"
alias bpedit="vim ~/.bash_profile"
alias vrcedit="vim ~/.vimrc"
alias reload=". ~/.bash_profile"
alias topten="history | awk '{print \$2}' | awk 'BEGIN {FS=\"|\"}{print \$1}' | sort | uniq -c | sort -n | tail | sort -nr"
alias extip="curl http://icanhazip.com/s"
alias speedtest="wget -O /dev/null http://speedtest.wdc01.softlayer.com/downloads/test10.zip"

# eval "$(hub alias -s)"

alias mntshare="mkdir /Volumes/Shared; mount_smbfs //172.17.2.3/Shared /Volumes/Shared"
alias mntdata="mkdir /Volumes/Data; mount_smbfs //172.17.2.3/Data /Volumes/Data"
alias sunphoto="screen /dev/cu.usbserial-AE01AN5K 19200"

# taskWarrior
alias tsum="task summary"
alias twact="task active tag.not=home"
# }}}

# {{{ EXPORTS
# To use the mono assemblies from other formulae you need to set
export MONO_GAC_PREFIX="/usr/local"
export HISTCONTROL=ignorespace # history settings
export PATH="/usr/local/opt/python/libexec/bin:$PATH"
# }}}

# {{{ VIRTUALENV for Python
source /usr/local/bin/virtualenvwrapper.sh


# startup virtualenv-burrito
if [ -f $HOME/.venvburrito/startup.sh ]; then
    . $HOME/.venvburrito/startup.sh
fi

# sourced to enable virtual environment up cd into directory
# source /usr/local/opt/autoenv/activate.sh
# }}}

# {{{ VI ALL THE THINGS!!!
# set -o vi
set editing-mode vi
export EDITOR=vim
# }}}

# {{{ COLOR
export CLICOLOR=1
export LSCOLORS=gxBxhxDxfxhxhxhxhxcxcx
# Tell grep to highlight matches
export GREP_OPTIONS='--color=auto' colorize ls by default
export CLICOLOR=1

# use grc to color output
source /usr/local/etc/grc.bashrc


# enable powerline
# function _update_ps1() {
#     PS1="$($DOTFILESDIR/powerline-shell.py $? 2> /dev/null)"
# }

# if [ "$TERM" != "linux" ]; then
#     PROMPT_COMMAND="_update_ps1; $PROMPT_COMMAND"
# fi
# }}}

# # {{{ OS SPECIFIC ACTIONS
#     # {{{ Linux
# if [[ "$OSTYPE" == "linux-gnu" ]]; then
#     # source bashrc if in Linux
#     if [ -f ~/.bashrc ]; then
#       . ~/.bashrc
#     fi
#     # }}}

#     # {{{ Mac OSX
# elif [[ "$OSTYPE" == "darwin"* ]]; then
#     # bash git tab completion
#     if [ -f $(brew --prefix)/etc/bash_completion ]; then
#       . $(brew --prefix)/etc/bash_completion
#     fi

#     # OSX specific aliases
#     alias plex="/usr/lib/plexmediaserver"
#     alias hideFiles='defaults write com.apple.finder AppleShowAllFiles NO; killall Finder /System/Library/CoreServices/Finder.app'

#     # Add directory to PYTHONPATH
#     export PYTHONPATH="${PYTHONPATH}:$HOME/git/cse_pv_tools"

#     # for reading lp docs
#     export XML_CATALOG_FILES="/usr/local/etc/xml/catalog"

#     # {{{ FUNCTIONS
#     # {{{ ABQ-VPN CONNECT
#     function avpn-connect {
#     /usr/bin/env osascript <<-EOF
#     tell application "System Events"
#             tell current location of network preferences
#                     set VPN to service "AbqVPN(PPTP)"
#                     if exists VPN then connect VPN
#                     repeat while (current configuration of VPN is not connected)
#                         delay 1
#                     end repeat
#             end tell
#     end tell
#     EOF
#     }
#     # }}}

#     # {{{ ABQ-VPN DISCONNECT
#     function avpn-disconnect {
#     /usr/bin/env osascript <<-EOF
#     tell application "System Events"
#             tell current location of network preferences
#                     set VPN to service "AbqVPN(PPTP)"
#                     if exists VPN then disconnect VPN
#             end tell
#     end tell
#     return
#     EOF
#     }
#     # }}}

#     # {{{ Boston-VPN CONNECT
#     function bvpn-connect {
#     /usr/bin/env osascript <<-EOF
#     tell application "System Events"
#             tell current location of network preferences
#                     set VPN to service "BostonVPN(PPTP)"
#                     if exists VPN then connect VPN
#                     repeat while (current configuration of VPN is not connected)
#                         delay 1
#                     end repeat
#             end tell
#     end tell
#     EOF
#     }
#     # }}}

#     # {{{ Boston-VPN DISCONNECT
#     function bvpn-disconnect {
#     /usr/bin/env osascript <<-EOF
#     tell application "System Events"
#             tell current location of network preferences
#                     set VPN to service "BostonVPN(PPTP)"
#                     if exists VPN then disconnect VPN
#             end tell
#     end tell
#     return
#     EOF
#     }
#     # }}}
#     #  }}}
#     # }}}
#     # {{{ Windows cygwin
# elif [[ "$OSTYPE" == "cygwin" ]]; then
#         # POSIX compatibility layer and Linux environment emulation for Windows
#         echo "We're in a windows environment"
#     # }}}
#     # {{{ If OS is unrecognized
# #else
#         # Unknown.
#     # }}}
# fi
# # }}}
