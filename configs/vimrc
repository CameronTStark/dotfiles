" {{{ vim-plug
call plug#begin('~/.vim/plugged')
Plug 'romainl/Apprentice' " A dark, low-contrast, Vim colorscheme.
Plug 'vim-airline/vim-airline' " light powerline
Plug 'vim-airline/vim-airline-themes' " themese for light powerline
" Interfaces
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'ctrlpvim/ctrlp.vim' " Ctrl+P search files
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' } " file tree navigation
Plug 'jistr/vim-nerdtree-tabs', { 'on':  'NERDTreeToggle' } " addon for nerdtree
" Code improvement
Plug 'Valloric/YouCompleteMe' " enable Autocompletion
Plug 'tpope/vim-commentary' " comment stuff out
Plug 'tpope/vim-surround' " easy add/change surrounding characters/tags
Plug 'chiel92/vim-autoformat' " easy code formatting in vim
Plug 'nathanaelkane/vim-indent-guides' " visually displaying indent levels in code
Plug 'xolox/vim-misc' " Miscellaneous auto-load Vim scripts
Plug 'xolox/vim-easytags' " Automated tag file generation and syntax highlighting of tags in Vim
Plug 'majutsushi/tagbar' " Vim plugin that displays tags in a window, ordered by scope
" git
Plug 'airblade/vim-gitgutter' " enable git details within vim
Plug 'tpope/vim-git' " Vim Git runtime files
Plug 'tpope/vim-fugitive' " git interaction from vim
Plug 'tpope/vim-sensible' " vim settings everyone can agree on
Plug 'tpope/vim-unimpaired' "
" PYTHON
Plug 'nvie/vim-flake8' " check PEP8 compliance
Plug 'hynek/vim-python-pep8-indent' " a nicer python indentation style for vim
Plug 'gotcha/vimpdb' " enable python debugging in vim
Plug 'tmhedberg/SimpylFold' " enable folding of code based on indents
Plug 'Konfekt/FastFold' " Speed up Vim by updating folds only when called-for.
Plug 'vim-scripts/vim-autopep8' " runs currently open file through autopep8
Plug 'w0rp/ale' " Asynchronous linting/fixing for Vim and Language Server Protocol (LSP) integration
Plug 'ambv/black' "The uncompromising Python code formatter
" Plug 'alfredodeza/pytest.vim' "Runs your UnitTests with py.test displaying red/green bars and errors
Plug 'janko-m/vim-test' "Run your tests at the speed of thought
Plug 'jmcantrell/vim-virtualenv' " Vim plugin for working with python virtualenvs
Plug 'julienr/vim-cellmode' " MATLAB-like cell execution for tmux/ipython
" JAVASCRIPT
Plug 'pangloss/vim-javascript' "JavaScript bundle for vim, this bundle provides syntax and indent plugins
Plug 'marijnh/tern_for_vim' " syntax highlighting for JavaScript
Plug 'maksimr/vim-jsbeautify' " beautifier for javascript
Plug 'elzr/vim-json' " better JSON for Vim
Plug 'alfredodeza/jacinto.vim' " Format and validate JSON files
" HTML
Plug 'othree/html5.vim' "HTML5 omnicomplete and syntax
Plug 'glench/vim-jinja2-syntax' " An up-to-date jinja2 syntax file.
Plug 'mattn/emmet-vim' " provides support for expanding abbertviations similar to emmet
Plug 'Valloric/MatchTagAlways' " highlights matched HTML tags
" CSV/DAT
Plug 'chrisbra/csv.vim' " Filetype plugin for csv files
" LaTeX
Plug 'lervag/vimtex' "  modern vim plugin for editing LaTeX files
" plain text
Plug 'dkarter/bullets.vim' " Bullets.vim is a Vim plugin for automated bullet lists.
Plug 'vimwiki/vimwiki' " Personal wiki for vim
" Plug 'tbabej/taskwiki' " Proper project management with Taskwarrior in vim.
" Plug 'blindFS/vim-taskwarrior' " vim interface for taskwarrior
" tmux
Plug 'edkolev/tmuxline.vim'
Plug 'tmux-plugins/vim-tmux' " Adds features to editing .tmux.conf
call plug#end()
" }}}

" {{{ Plugin configuration
" vimwiki config
let wiki_1 = {}
let wiki_1.index = 'personal'
let wiki_1.nested_syntaxes = {'python': 'python'}

let wiki_1.path = '~/Nextcloud/vimwiki/'

let g:vimwiki_list = [wiki_1]

hi VimwikiHeader1 guifg=#FF0000
hi VimwikiHeader2 guifg=#00FF00
hi VimwikiHeader3 guifg=#0000FF
hi VimwikiHeader4 guifg=#FF00FF
hi VimwikiHeader5 guifg=#00FFFF
hi VimwikiHeader6 guifg=#FFFF00

" YouCompleteMe
let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
let g:ycm_python_binary_path = 'python3'

" NerdTree Configuration
map <C-n> :NERDTreeToggle<CR> " mapping for NerdTree
let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree

"vim-cellmode
let g:cellmode_tmux_sessionname=''  " Will try to automatically pickup tmux session
let g:cellmode_tmux_windowname=''
let g:cellmode_tmux_panenumber='1'

" Bullets.vim
let g:bullets_enabled_file_types = [
    \ 'markdown',
    \ 'text',
    \ 'gitcommit',
    \ 'scratch'
    \]

" configure vim-flake8
let g:flake8_show_in_gutter=1
"autocmd BufWritePost *.py call Flake8()
" black
let g:black_linelength=79

" SimpylFold config
let g:SimpylFold_fold_import = 0
" let g:SimpylFold_fold_docstring = 0
" let g:SimpylFold_docstring_preview = 1

" Configure vim-test
let test#python#runner = 'pytest'

" Pytest
nmap <silent><Leader>f <Esc>:Pytest file<CR>
nmap <silent><Leader>c <Esc>:Pytest class<CR>
nmap <silent><Leader>m <Esc>:Pytest method<CR>

" configure airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_theme='murmur'

" ctags
nmap <F9> :TagbarToggle<CR>
" autocmd FileType python let b:easytags_auto_highlight = 0
" vimtex
if !exists('g:ycm_semantic_triggers')
    let g:ycm_semantic_triggers = {}
endif
let g:ycm_semantic_triggers.tex = g:vimtex#re#youcompleteme
" }}}

"{{{ General configuration
let mapleader = '\' " define leader
set hlsearch " set search highlighting
set nu " Line Numbering
set clipboard=unnamed " enable system clipboard
set splitbelow " frame horizontal split below
set splitright " frame vertical split right

" line numbering
set relativenumber
au FocusLost * :set number
au FocusGained * :set relativenumber
autocmd InsertEnter * :set number
autocmd InsertLeave * :set relativenumber

" Color Scheme
syntax enable
colorscheme apprentice

" Enable folding
" set foldmethod=indent
" set foldnestmax=5
" set foldlevel=99

" look in .vim/after/ directory for config files
set nocompatible
" filetype plugin on
" filetype plugin indent on

" set default window height
set winheight=30
set winminheight=5
" }}}

" {{{ Python specific
set encoding=utf-8 " Enable UTF-8 for python

" tab/space configuration
set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab
set ts=4

" flag & delete unnecessary whitespace
highlight BadWhitespace ctermbg=red guibg=darkred
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/
autocmd BufWritePre * :%s/\s\+$//e

" Pytest
nmap <silent><Leader>f <Esc>:Pytest function<CR>
nmap <silent><Leader>c <Esc>:Pytest class<CR>
nmap <silent><Leader>m <Esc>:Pytest method<CR>
" }}}

" {{{ Keyboard remapping
"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

nnoremap <space> za  " Enable folding with the spacebar

" remapping for easier insertion of new lines
" nmap <S-Enter> O<Esc>
" nmap <CR> o<Esc>

" In the quickfix window, <CR> is used to jump to the error under the
" cursor, so undefine the mapping there.
autocmd BufReadPost quickfix nnoremap <buffer> <CR> <CR>
"nnoremap <C-J> a<CR><Esc>k$ " keyboard mappings
" }}}

" {{{ Neo Vim
if has('nvim')
	" configure Esc for Terminal mode
    " return to Normal mode from Terminal mode
    tnoremap <Esc> <C-\><C-n>
    " send Esc in Terminal mode
    tnoremap <C-v><Esc> <Esc>

	" highlight :terminal mode cursor differently than outside NeoVim
    highlight! link TermCursor Cursor
    highlight! TermCursorNC guibg=red guifg=white ctermbg=1 ctermfg=15

    " quicker pane change from terminal
    tnoremap <M-h> <c-\><c-n><c-w>h
    tnoremap <M-j> <c-\><c-n><c-w>j
    tnoremap <M-k> <c-\><c-n><c-w>k
    tnoremap <M-l> <c-\><c-n><c-w>l

    " load iron.vim config
    luafile $HOME/.config/nvim/plugins.lua
endif
" }}}
